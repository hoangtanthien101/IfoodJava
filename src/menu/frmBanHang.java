package menu;

import DAO.BanAnDAO;
import DAO.HoaDonChiTietDAO;
import DAO.HoaDonDAO;
import DAO.MonAnDAO;
import TienIch.Auth;
import TienIch.MsgBox;
import TienIch.XDate;
import TienIch.XImage;
import entity.BanAn;
import entity.HoaDon;
import entity.HoaDonChiTiet;
import entity.MonAn;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JTable;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class frmBanHang extends javax.swing.JInternalFrame {

    public frmBanHang() {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI ui = (BasicInternalFrameUI) this.getUI();
        ui.setNorthPane(null);
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBan = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtMaHD = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        lblBan = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lblHinhAnh = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtSoLuong = new javax.swing.JSpinner();
        lblMaMon = new javax.swing.JLabel();
        lblTenMon = new javax.swing.JLabel();
        lblLoaiMon = new javax.swing.JLabel();
        lblGiaTien = new javax.swing.JLabel();
        lblTongTien = new javax.swing.JLabel();
        btnTaoHD = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMonAn = new javax.swing.JTable();
        btnTimHD = new javax.swing.JButton();
        txtTimKiem = new javax.swing.JTextField();
        pnlHDChung = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblHDCT = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblHoaDon = new javax.swing.JTable();
        btnLamMoi = new javax.swing.JButton();
        btnThemMon = new javax.swing.JButton();
        btnXoaMon = new javax.swing.JButton();
        btnThanhToan = new javax.swing.JButton();

        jButton2.setText("jButton2");

        jPanel1.setBackground(new java.awt.Color(153, 255, 204));

        jPanel3.setBackground(new java.awt.Color(153, 255, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel2.setBackground(new java.awt.Color(153, 255, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblBan.setBackground(new java.awt.Color(0, 255, 204));
        tblBan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MÃ BÀN", "TÊN BÀN ", "TRẠNG THÁI"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBan.setRowHeight(30);
        tblBan.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblBan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBanMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblBan);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(153, 255, 204));
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setText("Mã Hóa Đơn ");

        txtMaHD.setBackground(new java.awt.Color(153, 255, 204));
        txtMaHD.setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
        txtMaHD.setText("0");
        txtMaHD.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel4.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 51));
        jLabel4.setText("Bàn:");

        lblBan.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        lblBan.setForeground(new java.awt.Color(51, 51, 51));
        lblBan.setText("          ");

        jLabel2.setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setText("Mã Món Ăn:");

        jLabel3.setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 51));
        jLabel3.setText("Tên Món Ăn:");

        jLabel6.setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(51, 51, 51));
        jLabel6.setText("Loại:");

        jLabel7.setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setText("Giá:");

        jLabel8.setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(51, 51, 51));
        jLabel8.setText("Số lượng");

        lblHinhAnh.setBackground(new java.awt.Color(51, 51, 51));
        lblHinhAnh.setForeground(new java.awt.Color(0, 0, 0));
        lblHinhAnh.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        lblHinhAnh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblHinhAnhMouseClicked(evt);
            }
        });

        jLabel9.setBackground(new java.awt.Color(255, 51, 51));
        jLabel9.setFont(new java.awt.Font("Segoe UI Light", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 51, 51));
        jLabel9.setText("Tổng Tiền:");

        txtSoLuong.setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
        txtSoLuong.setModel(new javax.swing.SpinnerNumberModel(1, 1, 1000, 1));

        lblMaMon.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        lblMaMon.setForeground(new java.awt.Color(51, 51, 51));
        lblMaMon.setText("     ");

        lblTenMon.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        lblTenMon.setForeground(new java.awt.Color(51, 51, 51));
        lblTenMon.setText("     ");

        lblLoaiMon.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        lblLoaiMon.setForeground(new java.awt.Color(51, 51, 51));
        lblLoaiMon.setText("     ");

        lblGiaTien.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        lblGiaTien.setForeground(new java.awt.Color(51, 51, 51));
        lblGiaTien.setText("     ");

        lblTongTien.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        lblTongTien.setText("0");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTenMon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblLoaiMon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblGiaTien, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblMaMon, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(txtSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblHinhAnh, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(lblBan, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtMaHD, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jLabel1)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblTongTien, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtMaHD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lblBan))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(lblMaMon))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTenMon)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(lblLoaiMon))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(lblGiaTien))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txtSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblHinhAnh, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(lblTongTien))
                .addGap(32, 32, 32))
        );

        btnTaoHD.setBackground(new java.awt.Color(255, 102, 153));
        btnTaoHD.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        btnTaoHD.setForeground(new java.awt.Color(51, 51, 51));
        btnTaoHD.setText("TẠO HÓA ĐƠN MỚI");
        btnTaoHD.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnTaoHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaoHDActionPerformed(evt);
            }
        });

        tblMonAn.setBackground(new java.awt.Color(0, 255, 204));
        tblMonAn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "MÃ MÓN ĂN", "TÊN MÓN ĂN", "LOẠI ", "GIÁ TIỀN", "HÌNH ẢNH"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMonAn.setRowHeight(30);
        tblMonAn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMonAnMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblMonAn);
        if (tblMonAn.getColumnModel().getColumnCount() > 0) {
            tblMonAn.getColumnModel().getColumn(0).setPreferredWidth(100);
            tblMonAn.getColumnModel().getColumn(1).setPreferredWidth(150);
        }

        btnTimHD.setBackground(new java.awt.Color(255, 102, 153));
        btnTimHD.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        btnTimHD.setForeground(new java.awt.Color(51, 51, 51));
        btnTimHD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/timkiem.png"))); // NOI18N
        btnTimHD.setText("TÌM HÓA ĐƠN");
        btnTimHD.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnTimHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimHDActionPerformed(evt);
            }
        });

        txtTimKiem.setBackground(new java.awt.Color(153, 255, 204));
        txtTimKiem.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        txtTimKiem.setText("Tìm kiếm theo loại món !");
        txtTimKiem.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        txtTimKiem.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtTimKiemFocusGained(evt);
            }
        });
        txtTimKiem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                txtTimKiemMouseReleased(evt);
            }
        });

        pnlHDChung.setBackground(new java.awt.Color(153, 255, 204));
        pnlHDChung.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlHDChung.setForeground(new java.awt.Color(51, 51, 51));
        pnlHDChung.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N

        jPanel7.setBackground(new java.awt.Color(153, 255, 204));

        tblHDCT.setBackground(new java.awt.Color(0, 255, 204));
        tblHDCT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MÃ HDCT", "MÃ HÓA ĐƠN", "MÃ MÓN ĂN", "GIÁ TIỀN", "SỐ LƯỢNG", "THÀNH TIỀN"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblHDCT.setRowHeight(30);
        tblHDCT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHDCTMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tblHDCT);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 702, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pnlHDChung.addTab("HDCT", jPanel5);

        jPanel8.setBackground(new java.awt.Color(153, 255, 204));

        tblHoaDon.setBackground(new java.awt.Color(0, 255, 204));
        tblHoaDon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "MÃ HÓA ĐƠN", "MÃ BÀN ĂN", "MÃ NHÂN VIÊN", "TRẠNG THÁI", "NGÀY TẠO", "TỔNG TIỀN"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblHoaDon.setRowHeight(30);
        tblHoaDon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHoaDonMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tblHoaDon);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 702, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pnlHDChung.addTab("HÓA ĐƠN", jPanel6);

        btnLamMoi.setBackground(new java.awt.Color(204, 204, 204));
        btnLamMoi.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        btnLamMoi.setForeground(new java.awt.Color(51, 51, 51));
        btnLamMoi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/lammoi.png"))); // NOI18N
        btnLamMoi.setText("Mới");
        btnLamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoiActionPerformed(evt);
            }
        });

        btnThemMon.setBackground(new java.awt.Color(204, 204, 204));
        btnThemMon.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        btnThemMon.setForeground(new java.awt.Color(51, 51, 51));
        btnThemMon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/themmon.png"))); // NOI18N
        btnThemMon.setText("Thêm món");
        btnThemMon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemMonActionPerformed(evt);
            }
        });

        btnXoaMon.setBackground(new java.awt.Color(204, 204, 204));
        btnXoaMon.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        btnXoaMon.setForeground(new java.awt.Color(51, 51, 51));
        btnXoaMon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/xoa.png"))); // NOI18N
        btnXoaMon.setText("Xóa món");
        btnXoaMon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaMonActionPerformed(evt);
            }
        });

        btnThanhToan.setBackground(new java.awt.Color(204, 204, 204));
        btnThanhToan.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        btnThanhToan.setForeground(new java.awt.Color(51, 51, 51));
        btnThanhToan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/hoadon.png"))); // NOI18N
        btnThanhToan.setText("Thanh toán");
        btnThanhToan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThanhToanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(478, 478, 478)
                                .addComponent(btnTaoHD, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(btnTimHD, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(9, 9, 9))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(pnlHDChung, javax.swing.GroupLayout.PREFERRED_SIZE, 718, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnLamMoi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnXoaMon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnThanhToan, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)
                                    .addComponent(btnThemMon, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 94, Short.MAX_VALUE)
                        .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 80, 80))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTaoHD)
                    .addComponent(btnTimHD)
                    .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnLamMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnThemMon, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnXoaMon, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnThanhToan, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlHDChung, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lblHinhAnhMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblHinhAnhMouseClicked
//        choosePicture();
    }//GEN-LAST:event_lblHinhAnhMouseClicked

    private void txtTimKiemFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTimKiemFocusGained
        txtTimKiem.setText("");
    }//GEN-LAST:event_txtTimKiemFocusGained

    private void txtTimKiemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtTimKiemMouseReleased
        search();
    }//GEN-LAST:event_txtTimKiemMouseReleased

    private void tblBanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBanMouseClicked
        if (evt.getClickCount() == 1) {
            this.row = tblBan.getSelectedRow();
            int tenBan = (int) tblBan.getValueAt(this.row, 0);
            lblBan.setText(String.valueOf(tenBan));
        } else {
            if (kiemTraTaoHD()) {
                int maban = (int) tblBan.getValueAt(this.row, 0);
                if (kiemTraBanTrong(maban)) {
                    // Tiến hành tạo hóa đơn cho bàn
                    MsgBox.alert(this, "Bàn chưa được tạo!");
                } else {                   
                    fillHoaDonChiTietTheoBan();
                }
            }
        }
    }//GEN-LAST:event_tblBanMouseClicked

    private void tblMonAnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMonAnMouseClicked
        if (evt.getClickCount() == 1) {
            this.row = tblMonAn.getSelectedRow();
            int maMon = (int) tblMonAn.getValueAt(this.row, 0);
            String tenMon = (String) tblMonAn.getValueAt(this.row, 1);
            String loai = (String) tblMonAn.getValueAt(this.row, 2);
            double giaTien = (Double) tblMonAn.getValueAt(this.row, 3);
            String hinhAnh = (String) tblMonAn.getValueAt(this.row, 4);

            lblHinhAnh.setToolTipText(hinhAnh);
            lblHinhAnh.setIcon(XImage.readMon(hinhAnh));
            lblMaMon.setText(String.valueOf(maMon));
            lblTenMon.setText(tenMon);
            lblLoaiMon.setText(String.valueOf(loai));
            lblGiaTien.setText(String.valueOf(giaTien));
        }
    }//GEN-LAST:event_tblMonAnMouseClicked

    private void btnTaoHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaoHDActionPerformed
        txtMaHD.setText("0");
        pnlHDChung.setSelectedIndex(1);
        if (kiemTraTaoHD()) {
            int maban = (int) tblBan.getValueAt(this.row, 0); // Lấy mã bàn từ giao diện người dùng hoặc thông qua các phương thức khác
            if (kiemTraBanTrong(maban)) {
                // Tiến hành tạo hóa đơn cho bàn
                insertHoaDon();
            } else {
                MsgBox.alert(this, "Bàn đang có người dùng!");
            }
        }
    }//GEN-LAST:event_btnTaoHDActionPerformed

    private void btnThemMonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemMonActionPerformed
        if (kiemTraThemMon()) {
            insertThemMon();
        }
    }//GEN-LAST:event_btnThemMonActionPerformed

    private void btnTimHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimHDActionPerformed
        fillTableHDCT();
        pnlHDChung.setSelectedIndex(0);
    }//GEN-LAST:event_btnTimHDActionPerformed

    private void btnThanhToanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThanhToanActionPerformed
        if (kiemTraThanhToan()) {
            xuatHoaDon();
            updateHoaDon();
        }
    }//GEN-LAST:event_btnThanhToanActionPerformed

    private void btnXoaMonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaMonActionPerformed
        deleteTheoMon();
    }//GEN-LAST:event_btnXoaMonActionPerformed

    private void btnLamMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLamMoiActionPerformed
        clear();
    }//GEN-LAST:event_btnLamMoiActionPerformed

    private void tblHoaDonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHoaDonMouseClicked
        if (evt.getClickCount() == 1) {
            this.row = tblHoaDon.getSelectedRow();
            int maHD = (int) tblHoaDon.getValueAt(this.row, 0);
            txtMaHD.setText(String.valueOf(maHD));
            int maBan = (int) tblHoaDon.getValueAt(this.row, 1);
            lblBan.setText(String.valueOf(maBan));
        } else {
            pnlHDChung.setSelectedIndex(0);
            fillTableHDCT();
        }
    }//GEN-LAST:event_tblHoaDonMouseClicked

    private void tblHDCTMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHDCTMouseClicked
        if (evt.getClickCount() == 1) {
            this.row = tblHDCT.getSelectedRow();
            int maHD = (int) tblHDCT.getValueAt(this.row, 1);
            txtMaHD.setText(String.valueOf(maHD));
        }
    }//GEN-LAST:event_tblHDCTMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLamMoi;
    private javax.swing.JButton btnTaoHD;
    private javax.swing.JButton btnThanhToan;
    private javax.swing.JButton btnThemMon;
    private javax.swing.JButton btnTimHD;
    private javax.swing.JButton btnXoaMon;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lblBan;
    private javax.swing.JLabel lblGiaTien;
    private javax.swing.JLabel lblHinhAnh;
    private javax.swing.JLabel lblLoaiMon;
    private javax.swing.JLabel lblMaMon;
    private javax.swing.JLabel lblTenMon;
    private javax.swing.JLabel lblTongTien;
    private javax.swing.JTabbedPane pnlHDChung;
    private javax.swing.JTable tblBan;
    private javax.swing.JTable tblHDCT;
    private javax.swing.JTable tblHoaDon;
    private javax.swing.JTable tblMonAn;
    private javax.swing.JTextField txtMaHD;
    private javax.swing.JSpinner txtSoLuong;
    private javax.swing.JTextField txtTimKiem;
    // End of variables declaration//GEN-END:variables

    BanAnDAO banDao = new BanAnDAO();
    MonAnDAO monDao = new MonAnDAO();
    HoaDonDAO hdDao = new HoaDonDAO();
    HoaDonChiTietDAO hdctDao = new HoaDonChiTietDAO();
    int row = -1;

    LocalDate ngayTao = LocalDate.now();

    void init() {
        txtMaHD.enable(false);
        fillTableBan();
        fillTableMon();
        fillTableHoaDon();
        pnlHDChung.setSelectedIndex(1);
    }

    //Bàn ăn
    void fillTableBan() {
        DefaultTableModel model = (DefaultTableModel) tblBan.getModel();
        model.setRowCount(0);
        try {
            List<BanAn> list = banDao.selectAll();
            for (BanAn ban : list) {
                Object[] rows = {
                    ban.getMaBanAn(),
                    ban.getTenBanAn(),
                    ban.isTrangThai() ? "Trống" : "Có khách"
                };
                model.addRow(rows);
            }
        } catch (Exception e) {
            MsgBox.alert(this, "Lỗi truy cập dữ liệu!");
        }
    }

    //Món ăn
    void fillTableMon() {
        DefaultTableModel model = (DefaultTableModel) tblMonAn.getModel();
        model.setRowCount(0);
        try {
            List<MonAn> list = monDao.selectAllWithLoai();
            for (MonAn mon : list) {
                Object[] rows = {mon.getMaMonAn(),
                    mon.getTenMonAn(),
                    mon.getTenLoaiMonAn(),
                    mon.getGiaTien(),
                    mon.getHinhAnh()};
                model.addRow(rows);
            }
        } catch (Exception e) {
            MsgBox.alert(this, "Lỗi truy cập dữ liệu!");
        }
    }

    void fillTableMon1() {
        DefaultTableModel model = (DefaultTableModel) tblMonAn.getModel();
        model.setRowCount(0);
        try {
            String tenMon = txtTimKiem.getText();
            List<MonAn> list = monDao.selectTenLoaiLoai(tenMon);
            for (MonAn mon : list) {
                Object[] rows = {mon.getMaMonAn(),
                    mon.getTenMonAn(),
                    mon.getTenLoaiMonAn(),
                    mon.getGiaTien(),
                    mon.getHinhAnh()};
                model.addRow(rows);
            }
        } catch (Exception e) {
            MsgBox.alert(this, "Lỗi truy cập dữ liệu tìm kiếm!");
        }
    }

    void search() {
        this.fillTableMon1();
        this.row = -1;
    }

    void insertHoaDon() {
        HoaDon hd = getFormHoaDon();
        try {
            hdDao.insert(hd);
            txtMaHD.enable(false);
            int ban = Integer.valueOf(lblBan.getText());
            banDao.updateTrangThai(ban);
            fillTableHoaDon();
            fillTableBan();
            fillTableHDCT();
            MsgBox.alert(this, "Thêm hóa đơn thành công!");
        } catch (Exception e) {
            MsgBox.alert(this, "Thêm hóa đơn thất bại!");
        }
    }

    void updateHoaDon() {
        try {
            int maHD = Integer.valueOf(txtMaHD.getText());
            double tongTien = Double.valueOf(lblTongTien.getText());
            hdDao.updateTrangThaiTongTien(tongTien, maHD);
            int ban = Integer.valueOf(lblBan.getText());
            banDao.updateTrangThai1(ban);
            fillTableHoaDon();
            fillTableBan();
            pnlHDChung.setSelectedIndex(1);
            MsgBox.alert(this, "Đã thanh toán !");
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    private HoaDon getFormHoaDon() {
        HoaDon hd = new HoaDon();
        hd.setMaHD(Integer.valueOf(txtMaHD.getText()));
        hd.setMaBanAn(Integer.parseInt(lblBan.getText()));
        hd.setMaNV(Auth.user.getMaNV());
        hd.setTrangThai(false);
        hd.setNgayTao(new Date());
        hd.setTongTien(0);
        return hd;
    }

    ArrayList<HoaDon> arr1 = new ArrayList<HoaDon>();

    void fillTableHoaDon() {
        arr1.clear();
        DefaultTableModel model = (DefaultTableModel) tblHoaDon.getModel();
        model.setRowCount(0);
        try {
            List<HoaDon> list = hdDao.selectTrangThai();
            for (HoaDon hd : list) {
                Object[] rows = {hd.getMaHD(),
                    hd.getMaBanAn(),
                    hd.getHoten(),
                    hd.isTrangThai() ? "Đã thanh toán" : "Chưa thanh toán",
                    XDate.toString(hd.getNgayTao(), "dd-MM-yyyy"),
                    hd.getTongTien()};
                model.addRow(rows);

                HoaDon hd1 = new HoaDon(hd.getNgayTao());
                arr1.add(hd1);
            }
        } catch (Exception e) {
            MsgBox.alert(this, "Lỗi truy cập dữ liệu hóa đơn!");
            System.out.println(e);
        }
    }

    void insertThemMon() {
        HoaDonChiTiet hdct = getFormHDCT();
        try {
            hdctDao.insert(hdct);
            fillTableHDCT();
            MsgBox.alert(this, "Thêm mới thành công!");
        } catch (Exception e) {
            MsgBox.alert(this, "Thêm mới thất bại!");
        }
    }

    void deleteTheoMon() {
        int MaHDCT = (int) tblHDCT.getValueAt(this.row, 0);
        if (MsgBox.confirm(this, "Bạn có muốn xóa hay không?")) {
            try {
                hdctDao.delete(MaHDCT);
                fillTableHDCT();
                MsgBox.alert(this, "Xóa thành công!");
            } catch (Exception e) {
                MsgBox.alert(this, "Xóa thất bại!");
            }
        }
    }

    private HoaDonChiTiet getFormHDCT() {
        HoaDonChiTiet hdct = new HoaDonChiTiet();
        hdct.setMaHD(Integer.valueOf(txtMaHD.getText()));
        hdct.setMaMonAn(Integer.valueOf(lblMaMon.getText()));
        hdct.setSoLuong((int) txtSoLuong.getValue());
        hdct.setThanhTien(Double.valueOf(lblGiaTien.getText()));
        return hdct;
    }

    ArrayList<HoaDonChiTiet> arr = new ArrayList<HoaDonChiTiet>();

    void fillTableHDCT() {
        arr.clear();
        DefaultTableModel model = (DefaultTableModel) tblHDCT.getModel();
        model.setRowCount(0);
        try {
            int mahd = Integer.valueOf(txtMaHD.getText());
            List<HoaDonChiTiet> list = hdctDao.selectByIdHoaDonCT(mahd);
            for (HoaDonChiTiet hdct : list) {
                Object[] rows = {
                    hdct.getMaHDCT(),
                    hdct.getMaHD(),
                    hdct.getTenMonAn(),
                    hdct.getGiaTien(),
                    hdct.getSoLuong(),
                    hdct.getThanhTien()
                };
                model.addRow(rows);

                HoaDonChiTiet hdc = new HoaDonChiTiet(
                        hdct.getMaHDCT(),
                        hdct.getMaHD(),
                        hdct.getTenMonAn(),
                        hdct.getGiaTien(),
                        hdct.getSoLuong(),
                        hdct.getThanhTien()
                );
                arr.add(hdc);
            }
            lblTongTien.setText(TongTien(tblHDCT));
        } catch (Exception e) {
            MsgBox.alert(this, "Lỗi truy cập dữ liệu hóa đơn chi tiết!");
            System.out.println(e);
        }
    }

    public static String TongTien(JTable tbl) {
        double tongTien = 0;
        for (int i = 0; i < tbl.getRowCount(); i++) {
            tongTien += (Double) tbl.getValueAt(i, 5);
        }
        return String.valueOf(tongTien);
    }

    void fillHoaDonChiTietTheoBan() {
        pnlHDChung.setSelectedIndex(0);
        DefaultTableModel model = (DefaultTableModel) tblHDCT.getModel();
        model.setRowCount(0);
        try {
            int maBan = (int) tblBan.getValueAt(this.row, 0);
            List<HoaDonChiTiet> list = hdctDao.selectBanAnDangDung(maBan);
            for (HoaDonChiTiet hdct : list) {
                Object[] rows = {
                    hdct.getMaHDCT(),
                    hdct.getMaHD(),
                    hdct.getTenMonAn(),
                    hdct.getGiaTien(),
                    hdct.getSoLuong(),
                    hdct.getThanhTien()
                };
                model.addRow(rows);
            }
            lblTongTien.setText(TongTien(tblHDCT));
        } catch (Exception e) {
            MsgBox.alert(this, "Lỗi truy cập dữ liệu hóa đơn chi tiết!");
            System.out.println(e);
        }
    }

    void clear() {
        txtMaHD.setText("");
        lblBan.setText("");
        lblMaMon.setText("");
        lblTenMon.setText("");
        lblLoaiMon.setText("");
        lblGiaTien.setText("");
        lblHinhAnh.setIcon(null);
    }

    void xuatHoaDon() {
        try {
            XSSFWorkbook wordkbook = new XSSFWorkbook();
            XSSFSheet sheet = wordkbook.createSheet("hoadon");
            // dòng
            XSSFRow row = null;
            Cell cell = null;

            row = sheet.createRow(3);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellValue("MÃ HDCT");

//            cell = row.createCell(1, CellType.STRING);
//            cell.setCellValue("MÃ HÓA ĐƠN");
            cell = row.createCell(1, CellType.STRING);
            cell.setCellValue("TÊN MÓN ĂN");

            cell = row.createCell(2, CellType.STRING);
            cell.setCellValue("SỐ LƯỢNG");

            cell = row.createCell(3, CellType.STRING);
            cell.setCellValue("GIÁ TIỀN");

            cell = row.createCell(4, CellType.STRING);
            cell.setCellValue("THÀNH TIỀN");

            double tongTien = 0;
            for (int i = 0; i < arr.size(); i++) {
                row = sheet.createRow(4 + i);
                cell = row.createCell(0, CellType.STRING);
                cell.setCellValue(arr.get(i).getMaHDCT());

//                cell = row.createCell(1, CellType.STRING);
//                cell.setCellValue(arr.get(i).getMaHD());
                cell = row.createCell(1, CellType.STRING);
                cell.setCellValue(arr.get(i).getTenMonAn());

                cell = row.createCell(2, CellType.STRING);
                cell.setCellValue(arr.get(i).getSoLuong());

                cell = row.createCell(3, CellType.STRING);
                cell.setCellValue(arr.get(i).getGiaTien());

                cell = row.createCell(4, CellType.STRING);
                cell.setCellValue(arr.get(i).getThanhTien());

                tongTien += arr.get(i).getThanhTien();
            }

            row = sheet.createRow(1);
            cell = row.createCell(2); // Cột 0
            cell.setCellValue("Hóa đơn:");
            cell = row.createCell(3, CellType.NUMERIC); // Cột 3
            cell.setCellValue(arr.get(1).getMaHD());

            row = sheet.createRow(4 + arr.size()); // Dòng mới sau tất cả các dòng dữ liệu
            cell = row.createCell(0); // Cột 0
            cell.setCellValue("Tổng Tiền");

            // Tạo ô mới cho giá trị tổng tiền
            cell = row.createCell(4, CellType.NUMERIC); // Cột 4
            cell.setCellValue(tongTien);

            row = sheet.createRow(0);
            cell = row.createCell(2); // Cột 0
            cell.setCellValue("Ngày:");

            CellStyle dateCellStyle = wordkbook.createCellStyle();
            dateCellStyle.setDataFormat(wordkbook.getCreationHelper().createDataFormat().getFormat("dd-MM-yyyy"));

            cell = row.createCell(3, CellType.NUMERIC);
            cell.setCellValue(Date.from(ngayTao.atStartOfDay(ZoneId.systemDefault()).toInstant()));
            cell.setCellStyle(dateCellStyle);

            File f = new File("E://danhsach.xlsx");
            try {
                FileOutputStream fis = new FileOutputStream(f);
                wordkbook.write(fis);
                fis.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }

            MsgBox.alert(this, "In thành công !");

        } catch (Exception e) {
            e.printStackTrace();
            MsgBox.alert(this, "Lỗi mở file!");
        }
    }

    boolean kiemTraTaoHD() {
        if (lblBan.getText().trim().length() == 0) {
            MsgBox.alert(this, "Chưa chọn bàn!");
            return false;
        }

        return true;
    }

    public boolean kiemTraBanTrong(int maBanAn) {
        // Kiểm tra xem bàn có người dùng hay không
        boolean banCoNguoiDung = banDao.isBanAnCoNguoiDung(maBanAn);
        if (banCoNguoiDung) {
            // Bàn đã có người dùng, không thể tạo thêm hóa đơn
            return false;
        } else {
            // Bàn trống, có thể tạo hóa đơn mới
            return true;
        }
    }

    boolean kiemTraThanhToan() {
        if (txtMaHD.getText().trim().length() == 0) {
            MsgBox.alert(this, "Chưa xác định được hóa đơn muốn thanh toán!");
            txtMaHD.requestFocus();
            return false;
        }
        return true;
    }

    boolean kiemTraThemMon() {
        if (txtMaHD.getText().trim().length() == 0) {
            MsgBox.alert(this, "Chưa xác định được hóa đơn muốn thêm món !");
            txtMaHD.requestFocus();
            return false;
        }
        if (lblMaMon.getText().trim().length() == 0) {
            MsgBox.alert(this, "Chưa chọn món ăn !");
            return false;
        }
        return true;
    }

//    boolean kiemTraXoaMon() {
//        if (txtMaHD.getText().trim().length() == 0) {
//            MsgBox.alert(this, "Chưa xác định được hóa đơn muốn xóa món !");
//            txtMaHD.requestFocus();
//            return false;
//        }
//        if (lblMaMon.getText().trim().length() == 0) {
//            MsgBox.alert(this, "Chưa chọn món muốn xóa !");
//            return false;
//        }
//        return true;
//    }
}
